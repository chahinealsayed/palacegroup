{"version":3,"file":"Button.js","sources":["../../../../resources/js/lib/helper/numbers.ts","../../../../resources/js/lib/helper/strings.ts","../../../../resources/js/modules/bootstrap/components/Button.vue"],"sourcesContent":["export const random = (min: number, max: number) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n","import { Color } from \"@/modules/bootstrap/types\";\nimport { random } from \"./numbers\";\nimport { parsePhoneNumber } from \"libphonenumber-js\";\n\nexport const autoId = (prefix: string = \"id\") => {\n  return `${prefix}-${random(1000, 9999)}-${random(100000, 999999)}-${random(\n    1000,\n    9999\n  )}-${random(1000000, 9999999)}-${random(1000, 9999)}-${random(\n    10000000,\n    99999999\n  )}`;\n};\n\nexport const capitalizeFirst = ([first, ...rest]: string, lowerRest = false) =>\n  first.toUpperCase() +\n  (lowerRest ? rest.join(\"\").toLowerCase() : rest.join(\"\"));\n\n/**\n * Slugify Text\n *\n * @param text\n * @param delimiter\n * @returns\n */\nexport const slugify = (text: string, delimiter: string = \"-\") => {\n  return text\n    .toString()\n    .trim()\n    .toLowerCase()\n    .replace(/\\s+/g, delimiter)\n    .replace(/[^\\w\\-]+/g, \"\")\n    .replace(/\\-\\-+/g, delimiter)\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\");\n};\n\n/**\n * Upper Case First Letter\n *\n * @param string\n * @returns\n */\nexport function ucFirst(string: string): string {\n  return string.replace(/^./, string[0].toUpperCase());\n}\n\n/**\n * Lower Case First Letter\n *\n * @param string\n * @returns\n */\nexport function lcFirst(string: string): string {\n  return string.replace(/^./, string[0].toLowerCase());\n}\n\n/**\n * Upper Case Text Words\n *\n * @param text\n * @returns\n */\nexport function ucWords(text: string): string {\n  return (text + \"\").replace(/^([a-z])|\\s+([a-z])/g, function ($1) {\n    return $1.toUpperCase();\n  });\n}\n\n/**\n * Lower Case Text Words\n *\n * @param text\n * @returns\n */\nexport function lcWords(text: string): string {\n  return (text + \"\").replace(/^([a-z])|\\s+([a-z])/g, function ($1) {\n    return $1.toLowerCase();\n  });\n}\n\nexport function createIds(prefix: string = \"id\") {\n  const date = new Date();\n  const time = date.getTime();\n  return `${prefix}-${time}-${random(1987, time)}-${random(2009, time)}`;\n}\n\nexport function nl2br(str: string, is_xhtml = false) {\n  if (typeof str === \"undefined\" || str === null) {\n    return \"\";\n  }\n  var breakTag =\n    is_xhtml || typeof is_xhtml === \"undefined\" ? \"<br />\" : \"<br>\";\n  return (str + \"\").replace(\n    /([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g,\n    \"$1\" + breakTag + \"$2\"\n  );\n}\n\nexport function formatBytes(bytes: number, decimals = 2) {\n  if (bytes === 0) return \"0 Bytes\";\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n}\n\nexport const na = () => {\n  return `<span class=\"text-muted\" style=\"user-select: none;\">N/A</span>`;\n};\n\nexport function copyText(text: string): Promise<void> {\n  if (window.isSecureContext) {\n    return navigator.clipboard.writeText(dedent(text));\n  }\n  return new Promise<void>((_, reject) => {\n    reject();\n  });\n}\n\nexport function dedent(text: string) {\n  const format = (str: string) => {\n    const lines = str.split(\"\\n\");\n    let out = \"\";\n    lines.forEach((line) => {\n      out += `${line.trim().replace(/ +(?= )/g, \"\")}\\n`;\n    });\n    return out;\n  };\n\n  return format(text);\n}\n\nexport function kebabCase(str: string) {\n  return (\n    str &&\n    str\n      ?.match(\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n      )\n      ?.map((x) => x.toLowerCase())\n      ?.join(\"-\")\n  );\n}\nexport function camelCase(str: string, delimiter: string = \"_\") {\n  return (\n    str &&\n    str\n      .split(delimiter)\n      .reduce(\n        (res, word, i) =>\n          i === 0\n            ? word.toLowerCase()\n            : `${res}${word.charAt(0).toUpperCase()}${word\n                .substring(1)\n                .toLowerCase()}`,\n        \"\"\n      )\n  );\n}\n\nexport function enumLabel(enumTxt: string) {\n  return enumTxt\n    .split(\"_\")\n    .map((txt) => ucFirst(txt))\n    .join(\" \");\n}\n\nexport function icon(options?: {\n  path: string;\n  size?: string | number;\n  viewBox?: string;\n  attrs?: { [name: string]: string };\n  color?: undefined | \"muted\" | Color;\n}) {\n  const { path, size, viewBox, attrs, color } = {\n    size: 24,\n    viewBox: \"0 0 24 24\",\n    attrs: {},\n    ...(options ?? {}),\n  };\n  const bind = Object.keys(attrs)\n    .map((name: string) => `${name}=\"${attrs[name]}\"`)\n    .join(\" \");\n  if (Object.hasOwn(attrs, \"style\") && attrs.style.includes(\"--r\")) {\n    attrs.style +=\n      \"transform: rotate(var(--r, 0deg)) scale(var(--sx, 1), var(--sy, 1));\";\n  }\n  return `\n\t<svg\n\t\twidth=\"${size}\"\n\t\theight=\"${size}\"\n\t\tviewBox=\"${viewBox}\"\n\t\tclass=\"${`${color ? \"text\" : \"default\"}-${color ?? \"color\"}`}\"\n\t\t${bind}\n\t>\n\t\t<path d=\"${path}\" style=\"fill: currentColor\" />\n\t</svg>\n\t`;\n}\n\nexport const rgbaToHex = (color: string): string => {\n  if (/^rgba/.test(color)) {\n    const rgba = color.replace(/^rgba?\\(|\\s+|\\)$/g, \"\").split(\",\");\n\n    // rgb to hex\n    // eslint-disable-next-line no-bitwise\n    let hex = `#${(\n      (1 << 24) +\n      (parseInt(rgba[0], 10) << 16) +\n      (parseInt(rgba[1], 10) << 8) +\n      parseInt(rgba[2], 10)\n    )\n      .toString(16)\n      .slice(1)}`;\n\n    // added alpha param if exists\n    if (rgba[4]) {\n      const alpha = Math.round(0o1 * 255);\n      const hexAlpha = (alpha + 0x10000).toString(16).substr(-2).toUpperCase();\n      hex += hexAlpha;\n    }\n\n    return hex;\n  }\n  return color;\n};\n\nexport const sortHexColors = (colors: Array<string>) => {\n  const toObj = (color: string) => {\n    const colorObj: any = {\n      hex: color,\n    };\n    let hex = colorObj.hex.substring(1);\n    /* Get the RGB values to calculate the Hue. */\n    let r = parseInt(hex.substring(0, 2), 16) / 255;\n    let g = parseInt(hex.substring(2, 4), 16) / 255;\n    let b = parseInt(hex.substring(4, 6), 16) / 255;\n\n    /* Getting the Max and Min values for Chroma. */\n    let max = Math.max.apply(Math, [r, g, b]);\n    let min = Math.min.apply(Math, [r, g, b]);\n\n    /* Variables for HSV value of hex color. */\n    let chr = max - min;\n    let hue = 0;\n    let val = max;\n    let sat = 0;\n\n    if (val > 0) {\n      /* Calculate Saturation only if Value isn't 0. */\n      sat = chr / val;\n      if (sat > 0) {\n        if (r == max) {\n          hue = 60 * ((g - min - (b - min)) / chr);\n          if (hue < 0) {\n            hue += 360;\n          }\n        } else if (g == max) {\n          hue = 120 + 60 * ((b - min - (r - min)) / chr);\n        } else if (b == max) {\n          hue = 240 + 60 * ((r - min - (g - min)) / chr);\n        }\n      }\n    }\n    colorObj.chroma = chr;\n    colorObj.hue = hue;\n    colorObj.sat = sat;\n    colorObj.val = val;\n    colorObj.luma = 0.3 * r + 0.59 * g + 0.11 * b;\n    colorObj.red = parseInt(hex.substring(0, 2), 16);\n    colorObj.green = parseInt(hex.substring(2, 4), 16);\n    colorObj.blue = parseInt(hex.substring(4, 6), 16);\n    return colorObj;\n  };\n\n  const sortColorsByLuma = (colors) => {\n    return colors.sort(function (a, b) {\n      return a.luma - b.luma;\n    });\n  };\n  const objs: any = [];\n  colors.forEach((color) => {\n    objs.push(toObj(color));\n  })\n\n  return sortColorsByLuma(objs);\n};\n\nexport function displayPhone(phone: string) {\n  const phoneNumber = parsePhoneNumber(phone);\n  return phoneNumber.format(\"INTERNATIONAL\");\n}\n\n","<script setup lang=\"ts\">\nimport { computed, ref, nextTick } from \"vue\";\nimport type {\n  ButtonColor,\n  ButtonType,\n  ButtonSize,\n  SpinnerColor,\n  SpinnerType,\n} from \"../types\";\nimport Spinner from \"./Spinner.vue\";\n\ntype Props = {\n  color?: ButtonColor;\n  outline?: boolean;\n  size?: null | ButtonSize;\n  type?: ButtonType;\n  disabled?: boolean;\n  spinnerColor?: SpinnerColor;\n  spinnerType?: SpinnerType;\n  spinnerSmall?: boolean;\n  direction?: \"horizontal\" | \"vertical\";\n};\n\nconst {\n  color = \"primary\",\n  outline = false,\n  size = null,\n  type = \"button\",\n  disabled = false,\n  spinnerColor = \"primary\",\n  spinnerType = \"border\",\n  spinnerSmall = false,\n  direction = \"horizontal\",\n} = defineProps<Props>();\n\nconst classes = computed(() => {\n  const cls: any = { btn: true };\n  if (outline) {\n    cls[`btn-outline-${color}`] = true;\n  } else {\n    cls[`btn-${color}`] = true;\n  }\n  if (size) {\n    cls[`btn-${size}`] = true;\n  }\n  return cls;\n});\n\nconst isDisabled = ref<boolean>(disabled);\nconst loading = ref<boolean>(false);\nconst btn = ref<any>(null);\n\nconst enable = () => {\n  isDisabled.value = false;\n};\n\nconst disable = () => {\n  isDisabled.value = true;\n};\n\nconst start = () => {\n  loading.value = true;\n  nextTick(() => {\n    disable();\n  });\n};\n\nconst stop = () => {\n  loading.value = false;\n  nextTick(() => {\n    enable();\n  });\n};\n\ndefineExpose({ enable, disable, start, stop, spinning: () => loading.value, element: () => btn.value });\n</script>\n<template>\n  <button :type=\"type\" :class=\"classes\" :disabled=\"isDisabled\" v-bind=\"$attrs\" ref=\"btn\">\n    <template v-if=\"loading\">\n      <Spinner\n        :color=\"spinnerColor\"\n        :type=\"spinnerType\"\n        :small=\"spinnerSmall\"\n      />\n    </template>\n    <template v-else>\n      <slot></slot>\n    </template>\n  </button>\n</template>\n<style scoped lang=\"scss\">\nbutton {\n  display: flex;\n  flex-direction: v-bind(direction);\n  gap: 10px;\n  white-space: nowrap;\n  justify-content: center;\n  align-items: center;\n}\n</style>\n"],"names":["random","min","max","autoId","prefix","ucFirst","string","nl2br","str","is_xhtml","breakTag","na","icon","options","path","size","viewBox","attrs","color","bind","name","rgbaToHex","rgba","hex","hexAlpha","sortHexColors","colors","toObj","colorObj","r","g","b","chr","hue","val","sat","sortColorsByLuma","objs","classes","computed","cls","__props","isDisabled","ref","loading","btn","enable","disable","__expose","nextTick"],"mappings":"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"}