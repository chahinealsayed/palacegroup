{"version":3,"file":"ModalForm.js","sources":["../../../../resources/js/components/Pagination.vue","../../../../resources/js/components/Search.vue","../../../../resources/js/modules/crud/components/Crud.vue","../../../../resources/js/lib/helper/object.ts","../../../../resources/js/modules/crud/lib/crud.ts","../../../../resources/js/modules/form/components/helper/ModalForm.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { pagination } from \"@/lib/helper/functions\";\nimport { translate } from \"@/lib/metadata\";\nimport { computed, ref, watch } from \"vue\";\nimport Icon from \"@/components/Icon.vue\";\nimport {\n  mdiChevronDoubleLeft,\n  mdiChevronDoubleRight,\n  mdiChevronLeft,\n  mdiChevronRight,\n} from \"@mdi/js\";\nimport Dropdown from \"@/modules/bootstrap/components/Dropdown.vue\";\nimport DropdownItem from \"@/modules/bootstrap/components/DropdownItem.vue\";\n\ntype Props = {\n  page?: number;\n  perPage?: number;\n  total?: number;\n  pages?: number;\n  buttons?: number;\n  sizes?: Array<number>;\n};\n\nconst {\n  page = 1,\n  perPage = 10,\n  total = 0,\n  buttons = 5,\n  sizes = [5, 10, 25, 50],\n} = defineProps<Props>();\n\ntype Emits = {\n  \"update:page\": any;\n  \"update:perPage\": any;\n  \"update:total\": any;\n  \"update:buttons\": any;\n  change: any;\n};\nconst emit = defineEmits<Emits>();\n\nconst currentPage = ref(page);\nconst customPage = ref(page);\nconst pageSize = ref(perPage);\nconst pagesNb = computed(() => Math.ceil(total / pageSize.value));\nconst items = computed(() =>\n  pagination(currentPage.value, perPage, total, buttons)\n);\nconst dropDown: any = ref(null);\n\nwatch(\n  [currentPage, pageSize],\n  () => {\n    emit(\"update:page\", currentPage);\n    emit(\"update:perPage\", pageSize);\n    emit(\"update:total\", total);\n    emit(\"update:buttons\", buttons);\n    emit(\"change\", {\n      page: currentPage,\n      perPage: pageSize,\n      total: total,\n      pages: pagesNb.value,\n      buttons: buttons,\n    });\n  },\n  { deep: true }\n);\n\nwatch(pageSize, () => {\n  currentPage.value = 1;\n});\n\nconst goTo = (page) => {\n  currentPage.value = page;\n};\nconst increment = () => {\n  customPage.value++;\n  if (customPage.value > pagesNb.value) {\n    customPage.value = 1;\n  }\n};\nconst decrement = () => {\n  customPage.value--;\n  if (customPage.value < 1) {\n    customPage.value = pagesNb.value;\n  }\n};\nconst changeSize = (size) => {\n  pageSize.value = size;\n  dropDown.value.close();\n};\n\ndefineExpose({ goTo, increment, decrement, changeSize });\n</script>\n<template>\n  <div class=\"pagination-component\">\n    <div class=\"count\" v-if=\"total > 0\">\n      {{\n        translate(\n          \":?-:? of :? rows\",\n          perPage * currentPage - (perPage - 1),\n          perPage * currentPage <= total ? perPage * currentPage : total,\n          total\n        )\n      }}\n    </div>\n    <nav aria-label=\"Page navigation\" v-if=\"items.length > 1\" class=\"pages\">\n      <ul class=\"pagination pagination-sm\">\n        <li class=\"page-item\" :class=\"{ disabled: currentPage === 1 }\">\n          <a\n            class=\"page-link\"\n            href=\"#\"\n            tabindex=\"-1\"\n            aria-disabled=\"true\"\n            @click.prevent=\"goTo(1)\"\n          >\n            <Icon :path=\"mdiChevronDoubleLeft\" />\n          </a>\n        </li>\n        <li class=\"page-item\" :class=\"{ disabled: currentPage === 1 }\">\n          <a\n            class=\"page-link\"\n            href=\"#\"\n            tabindex=\"-1\"\n            aria-disabled=\"true\"\n            @click.prevent=\"goTo(currentPage - 1)\"\n          >\n            <Icon :path=\"mdiChevronLeft\" />\n          </a>\n        </li>\n        <li\n          class=\"page-item\"\n          v-for=\"p in items\"\n          :key=\"p\"\n          :class=\"{ active: p === currentPage }\"\n        >\n          <span class=\"page-link\" v-if=\"p === currentPage\">{{ p }}</span>\n          <a v-else class=\"page-link\" href=\"#\" @click.prevent=\"goTo(p)\">{{\n            p\n          }}</a>\n        </li>\n        <li class=\"page-item\" :class=\"{ disabled: currentPage === pagesNb }\">\n          <a class=\"page-link\" href=\"#\" @click.prevent=\"goTo(currentPage + 1)\">\n            <Icon :path=\"mdiChevronRight\" />\n          </a>\n        </li>\n        <li class=\"page-item\" :class=\"{ disabled: currentPage === pagesNb }\">\n          <a\n            class=\"page-link\"\n            href=\"#\"\n            tabindex=\"-1\"\n            aria-disabled=\"true\"\n            @click.prevent=\"goTo(pagesNb)\"\n          >\n            <Icon :path=\"mdiChevronDoubleRight\" />\n          </a>\n        </li>\n      </ul>\n    </nav>\n    <div class=\"per-page\">\n      <Dropdown\n        v-if=\"total > 0\"\n        ref=\"dropDown\"\n        :title=\"`${perPage} ${translate('rows')}`\"\n        auto-close\n      >\n        <template v-for=\"(size, i) in sizes\" :key=\"size\">\n          <DropdownItem\n            v-if=\"i === 0 || (sizes.at(i - 1) ?? 0) <= total\"\n            @click.prevent=\"changeSize(size)\"\n            >{{ size }} {{ translate(\"rows\") }}</DropdownItem\n          >\n        </template>\n      </Dropdown>\n    </div>\n  </div>\n</template>\n<style scoped lang=\"scss\">\n@import \"@scss/config\";\n@import \"@scss/mixins/font-size\";\n@import \"@scss/mixins/dark\";\n\n.pagination-component {\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  gap: 30px;\n  min-width: 100%;\n  height: 40px;\n\n  .count {\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    color: $gray-6;\n    @include font-size(0.9);\n  }\n  .pages {\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    .pagination {\n      margin: 0;\n      .page-item {\n        cursor: pointer;\n        .page-link {\n          @include font-size(1.2);\n          height: 40px;\n          min-width: 40px;\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n          justify-content: center;\n        }\n        &.active {\n          .page-link {\n            @include dark {\n              background-color: $info;\n              border-color: darken($info, 10%);\n            }\n          }\n        }\n        &.disabled {\n          cursor: not-allowed;\n        }\n      }\n    }\n  }\n  .per-page {\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport { translate } from \"@/lib/metadata\";\nimport Icon from \"@/components/Icon.vue\";\nimport { mdiClose, mdiSearchWeb } from \"@mdi/js\";\nimport { ref } from \"vue\";\n\ntype Props = {\n  modelValue: string;\n};\n\nconst { modelValue } = defineProps<Props>();\n\nconst emit = defineEmits([\"update:modelValue\", \"clear\", \"search\"]);\n\nconst changeValue = (event) => {\n  emit(\"update:modelValue\", event.target.value.trim());\n};\nconst clear = () => {\n  emit(\"clear\");\n};\nconst search = () => {\n  emit(\"search\");\n};\n</script>\n<template>\n  <div class=\"input-group search-input-group\">\n    <template v-if=\"$slots['start-search']\">\n      <slot name=\"start-search\"> </slot>\n    </template>\n    <button\n      v-if=\"modelValue !== ''\"\n      type=\"button\"\n      class=\"btn btn-primary\"\n      @click=\"clear\"\n    >\n      <Icon :path=\"mdiClose\" />\n    </button>\n    <template v-if=\"$slots['before-search']\">\n      <slot name=\"before-search\"> </slot>\n    </template>\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      :placeholder=\"translate('Search...')\"\n      :value=\"modelValue\"\n      @input=\"changeValue($event)\"\n      @keydown.stop.enter=\"search\"\n      @keydown.stop.esc=\"clear\"\n    />\n    <template v-if=\"$slots['after-search']\">\n      <slot name=\"after-search\"> </slot>\n    </template>\n    <button type=\"button\" class=\"btn btn-primary\" @click.prevent=\"search\">\n      <Icon :path=\"mdiSearchWeb\" />\n    </button>\n    <template v-if=\"$slots['end-search']\">\n      <slot name=\"end-search\"> </slot>\n    </template>\n  </div>\n</template>\n","<script setup lang=\"ts\" generic=\"T extends {} = {}, S extends string = string\">\nimport Icon from \"@/components/Icon.vue\";\nimport { Fields, FetchCallback, Field } from \"@/modules/crud/lib/crud\";\nimport { isDark, useThemeStore } from \"@/modules/theme\";\nimport {\n  mdiDotsVertical,\n  mdiMinusBoxOutline,\n  mdiPlusBoxOutline,\n  mdiRefresh,\n  mdiSort,\n  mdiSortAscending,\n  mdiSortDescending,\n} from \"@mdi/js\";\nimport { shallowRef, ref, computed, getCurrentInstance, onMounted } from \"vue\";\nimport { storeToRefs } from \"pinia\";\nimport Pagination from \"@/components/Pagination.vue\";\nimport Search from \"@/components/Search.vue\";\nimport Dropdown from \"@/modules/bootstrap/components/Dropdown.vue\";\nimport Button from \"@/modules/bootstrap/components/Button.vue\";\n\ntype Props = {\n  fields: Fields<S>;\n  fetch: FetchCallback<T>;\n  keyName?: string;\n};\n\nconst { fields, fetch, keyName = \"id\" } = defineProps<Props>();\n\nconst columns = computed<Fields<S>>(() => fields);\n\ntype GlobalSlots = {\n  before: any;\n  after: any;\n  topActions: any;\n  actions: (props: { item: T }) => any;\n  moreActions: (props: { item: T }) => any;\n  details: (props: { item: T }) => any;\n};\n\ntype HeaderSlots = {\n  [Property in S as `${Property}Header`]: (props: {\n    field: Field<Property>;\n  }) => any;\n};\n\ntype ValueSlots = {\n  [Property in S as `${Property}Value`]: (props: {\n    field: Field<Property>;\n    item: T;\n  }) => any;\n};\n\ntype Slots = GlobalSlots & HeaderSlots & ValueSlots;\ndefineSlots<Slots>();\n\ntype Emits = {\n  empty: any;\n  noEmpty: any;\n};\nconst emit = defineEmits<Emits>();\n\nconst instance = getCurrentInstance();\n\nconst themeStore = useThemeStore();\nconst { isDarkTheme } = storeToRefs<any>(themeStore);\n\nconst data = shallowRef<T[]>([]);\nconst page = ref<number>(1);\nconst perPage = ref<number>(5);\nconst keyword = ref<any>(\"\");\nconst sortName = ref<string>(keyName);\nconst sortAsc = ref<boolean>(true);\nconst total = ref(0);\nconst pages = ref(0);\nconst pagesButtons = ref(5);\nconst details = ref<any>({});\nconst refresher = ref<any>(null);\nconst version = ref<number>(0);\n\nconst load = async () => {\n  refresher.value?.start?.();\n  try {\n    const response = await fetch({\n      page: page.value,\n      perPage: perPage.value,\n      keyword: keyword.value,\n      sort: `${sortAsc.value ? \"\" : \"-\"}${sortName.value}`.trim(),\n      fields: columns.value,\n    });\n    data.value = response.data;\n    total.value = response?.total ?? 0;\n    page.value = response?.page ?? 1;\n    perPage.value = response?.perPage ?? 1;\n    pages.value = response?.pages ?? 0;\n    details.value = {};\n    if (data.value.length > 0) {\n      emit(\"noEmpty\");\n    } else {\n      emit(\"empty\");\n    }\n    version.value++;\n  } catch (e: any) {}\n  refresher.value?.stop?.();\n};\n\nconst loadSort = async (field: Field<S>) => {\n  if (field.sortable) {\n    sortName.value = field.name;\n    sortAsc.value = !sortAsc.value;\n    load();\n  }\n};\n\nconst changePage = (pagination) => {\n  page.value = pagination.page.value;\n  perPage.value = pagination.perPage.value;\n  load();\n};\n\nconst search = () => {\n  page.value = 1;\n  load();\n};\nconst clear = () => {\n  page.value = 1;\n  keyword.value = \"\";\n  load();\n};\n\nconst refresh = () => {\n  load();\n};\n\nconst isVisible = (field: Field) => {\n  return field.visible === undefined || field.visible;\n};\n\nconst colsCount = computed(() => {\n  return (\n    fields.filter((field) => isVisible(field)).length +\n    1 /* countable rows # */ +\n    (instance?.proxy?.$slots?.actions ? 1 : 0) +\n    (instance?.proxy?.$slots?.moreActions ? 1 : 0) +\n    (instance?.proxy?.$slots?.details ? 1 : 0)\n  );\n});\n\nconst toggleDetails = (item: T) => {\n  details.value = { ...details.value, [item[keyName]]: !inDetailsMode(item) };\n};\n\nconst inDetailsMode = (item: T) => {\n  return (\n    Object.hasOwn(details.value, item[keyName]) && details.value[item[keyName]]\n  );\n};\n\nconst length = computed(() => data.value?.length ?? 0)\n\nonMounted(() => {\n  load();\n});\n\ndefineExpose({ refresh, length: () => length.value, data: () => data.value });\n</script>\n<template>\n  <div class=\"crud-component\" :key=\"`crud-${version}`\">\n    <slot name=\"start\"></slot>\n    <div class=\"row\">\n      <div class=\"col-md-5\">\n        <div class=\"d-flex flex-horizontal gap-3\">\n          <Button\n            color=\"primary\"\n            @click=\"refresh\"\n            ref=\"refresher\"\n            spinner-small\n            spinner-color=\"light\"\n            style=\"min-width: 50px\"\n          >\n            <Icon :path=\"mdiRefresh\" />\n          </Button>\n          <Search v-model=\"keyword\" @clear=\"clear\" @search=\"search\">\n            <template v-if=\"$slots['start-search']\" #start-search>\n              <slot name=\"start-search\"> </slot>\n            </template>\n            <template v-if=\"$slots['before-search']\" #before-search>\n              <slot name=\"before-search\"> </slot>\n            </template>\n            <template v-if=\"$slots['after-search']\" #after-search>\n              <slot name=\"after-search\"> </slot>\n            </template>\n            <template v-if=\"$slots['end-search']\" #end-search>\n              <slot name=\"end-search\"> </slot>\n            </template>\n          </Search>\n        </div>\n      </div>\n      <div class=\"col-md-7\">\n        <div class=\"d-flex gap-2 justify-content-end align-items-center h-100\">\n          <slot name=\"topActions\"></slot>\n        </div>\n      </div>\n    </div>\n    <slot name=\"before\"></slot>\n    <div class=\"table-responsive\">\n      <table\n        class=\"table table-bordered table-striped table-hover m-0\"\n        :class=\"{ 'table-dark': isDarkTheme }\"\n      >\n        <thead>\n          <tr>\n            <th v-if=\"$slots.details\" class=\"fitable no-select\">&nbsp;</th>\n            <th class=\"fitable no-select\">#</th>\n            <template\n              v-for=\"(field, index) in columns\"\n              :key=\"`${field.name}-${index}`\"\n            >\n              <th\n                v-if=\"isVisible(field)\"\n                :class=\"{\n                  fitable: field.fitable,\n                  'no-select': true,\n                  pointer: field.sortable,\n                  'table-active': field.sortable && sortName === field.name,\n                }\"\n              >\n                <div class=\"d-flex gap-2\" @click.prevent.stop=\"loadSort(field)\">\n                  <span>\n                    <slot :name=\"`${field.name}Header`\" :field=\"field\">\n                      {{ field.label }}\n                    </slot>\n                  </span>\n                  <template v-if=\"field.sortable && sortName === field.name\">\n                    <Icon\n                      :path=\"sortAsc ? mdiSortAscending : mdiSortDescending\"\n                      :class=\"{ 'ms-auto': true }\"\n                      :color=\"isDark() ? 'info' : 'primary'\"\n                    />\n                  </template>\n                  <template v-else>\n                    <Icon :path=\"mdiSort\" class=\"ms-auto text-muted\" />\n                  </template>\n                </div>\n              </th>\n            </template>\n            <template v-if=\"$slots.moreActions || $slots.actions\">\n              <th\n                :colspan=\"$slots.moreActions && $slots.actions ? 2 : 1\"\n                class=\"fitable no-select\"\n              >\n                Actions\n              </th>\n            </template>\n          </tr>\n        </thead>\n        <tbody>\n          <template v-for=\"(item, r) in data\" :key=\"item[keyName]\">\n            <tr>\n              <td v-if=\"$slots.details\" class=\"fitable no-select align-middle\">\n                <Icon\n                  :path=\"\n                    inDetailsMode(item) ? mdiMinusBoxOutline : mdiPlusBoxOutline\n                  \"\n                  @click=\"toggleDetails(item)\"\n                  class=\"pointer\"\n                />\n              </td>\n              <td class=\"fitable no-select align-middle\">{{ r + 1 }}</td>\n              <template\n                v-for=\"(field, c) in columns\"\n                :key=\"`${field.name}-${c}`\"\n              >\n                <td\n                  v-if=\"isVisible(field)\"\n                  :class=\"{\n                    fitable: field.fitable,\n                    'select-all': true,\n                    'table-active': field.sortable && sortName === field.name,\n                    border: field.sortable && sortName === field.name,\n                    'align-middle': true,\n                  }\"\n                >\n                  <slot\n                    :name=\"`${field.name}Value`\"\n                    :field=\"field\"\n                    :item=\"item\"\n                  >\n                    {{ item[field.name as string] }}\n                  </slot>\n                </td>\n              </template>\n              <template v-if=\"$slots.actions\">\n                <td class=\"fitable no-select align-middle\">\n                  <div class=\"d-flex gap-2 align-items-start\">\n                    <slot name=\"actions\" :item=\"item\"></slot>\n                  </div>\n                </td>\n              </template>\n              <template v-if=\"$slots.moreActions\">\n                <td class=\"fitable no-select align-middle\">\n                  <Dropdown no-arrow div>\n                    <template #button>\n                      <Icon :path=\"mdiDotsVertical\" />\n                    </template>\n                    <slot name=\"moreActions\" :item=\"item\"></slot>\n                  </Dropdown>\n                </td>\n              </template>\n            </tr>\n            <template v-if=\"$slots.details && inDetailsMode(item)\">\n              <tr>\n                <td :colspan=\"colsCount\" class=\"p-0 align-middle\">\n                  <slot name=\"details\" :item=\"item\"></slot>\n                </td>\n              </tr>\n            </template>\n          </template>\n        </tbody>\n      </table>\n    </div>\n    <slot name=\"after\"></slot>\n    <Pagination\n      v-model:page=\"page\"\n      v-model:per-page=\"perPage\"\n      v-model:total=\"total\"\n      v-model:buttons=\"pagesButtons\"\n      @change=\"changePage\"\n    >\n    </Pagination>\n    <slot name=\"end\"></slot>\n  </div>\n</template>\n<style scoped lang=\"scss\">\n.crud-component {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n.fitable {\n  text-align: center;\n  white-space: nowrap;\n  width: 1%;\n}\n.no-select {\n  user-select: none;\n}\n.select-all {\n  user-select: all;\n}\n.pointer {\n  cursor: pointer;\n}\n</style>\n","export function serialize(obj: any, prefix: any = null): string {\n    const str: any = [];\n    let p: any;\n    for (p in obj) {\n      if (obj.hasOwnProperty(p)) {\n        const k = prefix ? `${prefix}[${p}]` : p;\n        const v = obj[p];\n        str.push(v !== null && typeof v === \"object\" ? serialize(v, k) : `${encodeURIComponent(k)}=${encodeURIComponent(v)}`);\n      }\n    }\n    return str.join(\"&\");\n  }\n  ","import { api } from \"@/lib/api\";\nimport { serialize } from \"@/lib/helper/object\";\n\nexport enum FieldType {\n  Number = \"number\",\n  String = \"string\",\n  Enum = \"enum\",\n}\n\nexport type Field<S extends string = string> = {\n  type: FieldType;\n  name: S;\n  label: string;\n  sortable?: boolean;\n  searchable?: boolean;\n  visible?: boolean;\n  fitable?: boolean;\n};\n\nexport type Fields<S extends string = string> = Array<Field<S>>;\n\nexport type FetchCallbackArgs = {\n  page: number;\n  perPage: number;\n  keyword: any;\n  sort: string;\n  fields: Fields;\n};\n\nexport type CrudResponse<T> = {\n  data: T[];\n  total?: number;\n  page?: number;\n  perPage?: number;\n  pages?: number;\n};\n\nexport type FetchCallback<T> = (\n  args: FetchCallbackArgs\n) => Promise<CrudResponse<T>>;\n\nexport const createResponse = <T>({ data, header }: any): CrudResponse<T> => {\n  return {\n    data,\n    total: parseInt(header(\"x-pagination-total-count\")) ?? 0,\n    page: parseInt(header(\"x-pagination-current-page\")) ?? 1,\n    perPage: parseInt(header(\"x-pagination-per-page\")) ?? 1,\n    pages: parseInt(header(\"x-pagination-page-count\")) ?? 0,\n  };\n};\n\nexport const buildFilter = (keyword, fields: Fields) => {\n  if (keyword) {\n    let filter: any = [];\n    for (const field of fields) {\n      if (field.searchable) {\n        const obj: any = {};\n        if (\n          field.type === FieldType.Number &&\n          /^\\d+\\.{0,1}\\d{0,}$/.test(keyword as string)\n        ) {\n          obj[field.name] = keyword;\n        } else if (\n          field.type === FieldType.String ||\n          field.type === FieldType.Enum\n        ) {\n          obj[field.name] = { like: keyword };\n        }\n        if (Object.keys(obj).length > 0) {\n          filter.push(obj);\n        }\n      }\n    }\n    filter = { or: filter };\n    return serialize(filter, \"filter\");\n  }\n  return \"\";\n};\n\nexport type FetchResult<Item> = ({\n  page,\n  perPage,\n  sort,\n  keyword,\n  fields,\n}: any) => Promise<CrudResponse<Item>>;\n\nexport const fetch = <Item = {}>(\n  path: string,\n  expand?: string,\n  params?: { [name: string]: any }\n): FetchResult<Item> => {\n  return ({\n    page,\n    perPage,\n    sort,\n    keyword,\n    fields,\n  }: any): Promise<CrudResponse<Item>> => {\n    return new Promise((resolve, reject) => {\n      const extraParams = () => {\n        if (params && Object.keys(params).length > 0) {\n          let p: any = [];\n          for (let i in params) {\n            if (typeof params[i] === \"object\") {\n              p.push(serialize(params[i], i));\n            } else {\n              p.push(`${i}=${params[i]}`);\n            }\n          }\n          return `&${p.join(\"&\")}`;\n        }\n        return \"\";\n      };\n      const filters = buildFilter(keyword, fields);\n      api()\n        .get(\n          `${path}?${\n            expand ? `expand=${expand}&` : \"\"\n          }page=${page}&per-page=${perPage}&sort=${sort}${\n            filters ? `&${filters}` : \"\"\n          }${extraParams()}`\n        )\n        .then((response: any) => {\n          resolve(createResponse<Item>(response));\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  };\n};\n\nexport const createFields = <S extends string = string>(\n  ...fields: Fields<S>\n): Fields<S> => {\n  return [...fields];\n};\n","<script setup lang=\"ts\" generic=\"T extends Model = Model\">\nimport Button from \"@/modules/bootstrap/components/Button.vue\";\nimport Modal from \"@/modules/bootstrap/components/Modal.vue\";\nimport { ModalFullscreen, ModalSize } from \"@/modules/bootstrap/types\";\nimport { ref, onMounted, nextTick } from \"vue\";\nimport { Model } from \"../../lib/model\";\nimport { IConstructor, createModel } from \"../../hooks/model\";\nimport Icon from \"@/components/Icon.vue\";\nimport { mdiSend } from \"@mdi/js\";\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\ntype Slots = {\n  default?: (props: { model: T }) => void;\n  header?: any;\n};\ndefineSlots<Slots>();\n\ntype Props = {\n  modelClass: IConstructor<T>;\n  name: string;\n  size?: null | ModalSize;\n  fullscreen?: boolean | ModalFullscreen;\n};\nconst {\n  modelClass,\n  name,\n  size = null,\n  fullscreen = false,\n} = defineProps<Props>();\n\ntype Emits = {\n  save: [model: T, done: (onlyStop?: boolean) => void];\n};\nconst emit = defineEmits<Emits>();\n\nconst modal = ref<any>(null);\nconst button = ref<any>(null);\n\nconst [model, newModel, destroyModel] = createModel(modelClass);\n\nconst open = <Item>(data?: Item) => {\n  newModel({ ...(data ?? {}) });\n  nextTick(() => {\n    modal.value?.open?.();\n  });\n};\n\nconst send = () => {\n  model.value?.validate?.()?.then?.((valid: boolean) => {\n    if (valid && model.value) {\n      button.value?.start?.();\n      emit(\"save\", model.value, (onlyStop: boolean = false) => {\n        button.value?.stop?.();\n        if (!onlyStop) {\n          nextTick(() => {\n            modal.value?.close?.();\n          });\n        }\n      });\n    }\n  });\n};\n\nconst unload = () => {\n  destroyModel();\n};\n\ndefineExpose({ open });\n</script>\n<template>\n  <Modal\n    v-if=\"model\"\n    ref=\"modal\"\n    tag=\"form\"\n    :title=\"`${model.isNewRecord ? `Add New` : `Edit`} ${name}`\"\n    :size=\"size\"\n    :fullscreen=\"fullscreen\"\n    @submit.prevent=\"send\"\n    @closed=\"unload\"\n  >\n    <template #header>\n      <slot name=\"header\"></slot>\n    </template>\n    <slot :model=\"model\"></slot>\n    <template #buttons>\n      <Button\n        type=\"submit\"\n        ref=\"button\"\n        color=\"primary\"\n        spinner-color=\"info\"\n        style=\"height: 42px\"\n      >\n        <Icon :path=\"mdiSend\" color=\"info\" />Save\n      </Button>\n    </template>\n  </Modal>\n</template>\n"],"names":["currentPage","ref","__props","customPage","pageSize","pagesNb","computed","items","pagination","dropDown","watch","emit","goTo","page","increment","decrement","changeSize","size","__expose","changeValue","event","clear","search","columns","instance","getCurrentInstance","themeStore","useThemeStore","isDarkTheme","storeToRefs","data","shallowRef","perPage","keyword","sortName","sortAsc","total","pages","pagesButtons","details","refresher","version","load","_b","_a","response","_d","_c","loadSort","field","changePage","refresh","isVisible","colsCount","_f","_e","toggleDetails","item","inDetailsMode","length","onMounted","serialize","obj","prefix","str","p","k","v","FieldType","createResponse","header","buildFilter","fields","filter","fetch","path","expand","params","sort","resolve","reject","extraParams","i","filters","api","e","createFields","modal","button","model","newModel","destroyModel","createModel","open","nextTick","send","valid","onlyStop","unload"],"mappings":"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"}